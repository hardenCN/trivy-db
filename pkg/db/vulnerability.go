package db

import (
	"encoding/json"

	bolt "go.etcd.io/bbolt"
	"golang.org/x/xerrors"

	"github.com/hardenCN/trivy-db/pkg/types"
)

const (
	vulnerabilityBucket = "vulnerability"
)

func (dbc Config) PutVulnerability(tx *bolt.Tx, cveID string, vuln types.Vulnerability) error {
	if err := dbc.put(tx, []string{vulnerabilityBucket}, cveID, vuln); err != nil {
		return xerrors.Errorf("failed to put severity: %w", err)
	}
	return nil
}

func (dbc Config) GetVulnerability(cveID string) (vuln types.Vulnerability, err error) {
	isSql := sqlDb != nil
	if isSql {
		// 使用mysql或pg
		querySql := `
					SELECT v.vulnerability_id, v.value
					FROM vulnerability v 
					WHERE v.vulnerability_id = '%s' LIMIT 1 OFFSET 0`
		// 执行查询
		rows, err := sqlDb.Query(querySql)
		if err != nil {
			return types.Vulnerability{}, xerrors.Errorf("failed to exe sqlDb GetVulnerability query: %w", err)
		}
		defer rows.Close()
		// 遍历结果
		for rows.Next() {
			var vulnerabilityId string
			var value []byte
			if err := rows.Scan(&vulnerabilityId, &value); err != nil {
				return types.Vulnerability{}, xerrors.Errorf("failed to loop sqldb GetVulnerability rows: %w", err)
			}
			if value == nil {
				return types.Vulnerability{}, xerrors.Errorf("sqldb no vulnerability details for %s", cveID)
			}
			if err = json.Unmarshal(value, &vuln); err != nil {
				return types.Vulnerability{}, xerrors.Errorf("sqldb failed to unmarshal JSON: %w", err)
			}
			return vuln, nil
		}
	} else {
		err = db.View(func(tx *bolt.Tx) error {
			bucket := tx.Bucket([]byte(vulnerabilityBucket))
			value := bucket.Get([]byte(cveID))
			if value == nil {
				return xerrors.Errorf("no vulnerability details for %s", cveID)
			}
			if err = json.Unmarshal(value, &vuln); err != nil {
				return xerrors.Errorf("failed to unmarshal JSON: %w", err)
			}
			return nil
		})
		if err != nil {
			return types.Vulnerability{}, xerrors.Errorf("failed to get the vulnerability %q: %w", cveID, err)
		}
		return vuln, nil
	}
	return types.Vulnerability{}, xerrors.Errorf("not match program! failed to get the vulnerability %q: %w", cveID, err)
}
